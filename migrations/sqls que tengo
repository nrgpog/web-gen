create or replace function delete_all_menu_data(p_server_id text, p_menu_number integer)
returns void
language plpgsql
security definer
as $$
begin
  -- Primero eliminamos el stock
  delete from stock
  where server_id = p_server_id
  and menu_number = p_menu_number;

  -- Luego eliminamos las opciones
  delete from options
  where server_id = p_server_id
  and menu_number = p_menu_number;
end;
$$;


-- Create server_names table
CREATE TABLE IF NOT EXISTS public.server_names (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    server_id TEXT NOT NULL UNIQUE,
    name TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create index for faster lookups
CREATE INDEX IF NOT EXISTS idx_server_names_server_id ON public.server_names(server_id);

-- Create trigger to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_server_names_updated_at
    BEFORE UPDATE ON public.server_names
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column(); 



    CREATE OR REPLACE FUNCTION delete_stock_item_v2(
  p_server_id TEXT,
  p_stock_id BIGINT,
  p_menu_number INTEGER
)
RETURNS BOOLEAN AS $$
DECLARE
  v_exists BOOLEAN;
BEGIN
  -- Verificar si el stock existe y pertenece al servidor y menú correcto
  SELECT EXISTS (
    SELECT 1
    FROM stock
    WHERE id = p_stock_id
    AND server_id = p_server_id
    AND menu_number = p_menu_number
  ) INTO v_exists;

  -- Si no existe, retornar falso
  IF NOT v_exists THEN
    RETURN FALSE;
  END IF;

  -- Eliminar el stock
  DELETE FROM stock
  WHERE id = p_stock_id
  AND server_id = p_server_id
  AND menu_number = p_menu_number;

  RETURN TRUE;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;



CREATE OR REPLACE FUNCTION public.delete_stock_item(
    p_server_id text,
    p_stock_id bigint,
    p_menu_number integer
)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    DELETE FROM stock
    WHERE server_id = p_server_id 
    AND id = p_stock_id 
    AND menu_number = p_menu_number;
END;
$$;


create table bot_config (
  id bigint generated by default as identity primary key,
  server_id text not null,
  menu1_cooldown integer not null default 60,
  menu2_cooldown integer not null default 60,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique(server_id)
);


create or replace function update_option_name(
  p_server_id text,
  p_option_id bigint,
  p_new_name text
)
returns void
language plpgsql
security definer
as $$
begin
  update options
  set name = p_new_name
  where server_id = p_server_id
  and id = p_option_id;

  if not found then
    raise exception 'No se encontró la opción para actualizar';
  end if;
end;
$$;


-- Crear tabla de opciones
create table options (
  id bigint primary key generated always as identity,
  server_id text not null,
  name text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Modificar tabla de stock para incluir la referencia a opciones
alter table stock add column option_id bigint references options(id);

-- Crear políticas para la tabla de opciones
alter table options enable row level security;

create policy "Enable insert for authenticated users only"
  on options for insert
  with check (true);

create policy "Enable select for authenticated users only"
  on options for select
  using (true);


  create table stock (
  id bigint primary key generated always as identity,
  server_id text not null,
  data text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Crear una política para permitir inserciones
alter table stock enable row level security;

create policy "Enable insert for authenticated users only"
  on stock for insert
  with check (true);  -- Permite inserciones a todos los usuarios autenticados

create policy "Enable select for authenticated users only"
  on stock for select
  using (true);  -- Permite lectura a todos los usuarios autenticados